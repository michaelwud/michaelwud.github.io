{
  "_from": "hexo-inject@^1.0.0",
  "_id": "hexo-inject@1.0.0",
  "_inBundle": false,
  "_integrity": "sha1-pTVXVgUdWrJ5yCtzfacrEzx+Ju0=",
  "_location": "/hexo-inject",
  "_phantomChildren": {},
  "_requested": {
    "escapedName": "hexo-inject",
    "fetchSpec": "^1.0.0",
    "name": "hexo-inject",
    "raw": "hexo-inject@^1.0.0",
    "rawSpec": "^1.0.0",
    "registry": true,
    "saveSpec": null,
    "type": "range"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/hexo-inject/-/hexo-inject-1.0.0.tgz",
  "_shasum": "a5355756051d5ab279c82b737da72b133c7e26ed",
  "_shrinkwrap": null,
  "_spec": "hexo-inject@^1.0.0",
  "_where": "D:\\Program Files\\hexo",
  "author": {
    "email": "akfish@gmail.com",
    "name": "AKFish",
    "url": "http://catx.me"
  },
  "bugs": {
    "url": "https://github.com/akfish/hexo-inject/issues"
  },
  "bundleDependencies": false,
  "dependencies": {
    "babel-plugin-transform-decorators-legacy": "^1.3.4",
    "babel-polyfill": "^6.7.2",
    "bluebird": "^3.3.4",
    "core-decorators": "^0.11.0",
    "underscore": "^1.8.3"
  },
  "deprecated": "The author does not use Hexo any more. This plugin is no longer maintained.",
  "description": "Dynamic script & style (and more) injection for Hexo",
  "devDependencies": {
    "babel-plugin-add-module-exports": "^0.1.2",
    "babel-plugin-transform-async-to-module-method": "^6.7.0",
    "babel-preset-es2015": "^6.5.0",
    "babel-register": "^6.5.2",
    "chai": "^3.5.0",
    "chai-as-promised": "^5.2.0",
    "coffee-script": "^1.10.0",
    "del": "^2.2.0",
    "gulp": "^3.9.1",
    "gulp-babel": "^6.1.2",
    "gulp-heap": "^2.0.0-alpha.1",
    "gulp-mocha": "^2.2.0",
    "hexo": "^3.2.0",
    "mocha": "^2.2.5",
    "sinon": "^1.17.3"
  },
  "homepage": "https://github.com/akfish/hexo-inject#readme",
  "keywords": [
    "hexo",
    "inject"
  ],
  "license": "MIT",
  "main": "lib/index.js",
  "name": "hexo-inject",
  "optionalDependencies": {},
  "readme": "# hexo-inject [![Build Status](https://travis-ci.org/akfish/hexo-inject.svg?branch=master)](https://travis-ci.org/akfish/hexo-inject)\n\nDynamic script & style (and more) injection for Hexo\n\n## Usage\n\nThis plugin is **for plugin/theme developers** to inject custom code into rendered HTML.\n\n### 0. Overview\n\nInjection is called once per complete HTML page (ones that have both `<head>` and `<body>` section).\n\nThere are 4 injection points:\n\nName | API\n---- | ---------\n`head_begin`  | `inject.headBegin`\n`head_end`    | `inject.headEnd`\n`body_begin`  | `inject.bodyBegin`\n`body_end`    | `inject.bodyEnd`\n\n```html\n<!DOCTYPE html>\n<html>\n  <head>\n    <!-- head_begin -->\n    <!-- ... -->\n    <!-- head_end -->\n  </head>\n  <body>\n    <!-- body_begin -->\n    <!-- ... -->\n    <!-- body_end -->\n  </body>\n</html>\n```\n\n### 1. Install\n\nAsk your user to run `npm install --save hexo-inject`.\n\nOr add `postinstall` script to your plugin's `package.json`:\n\n```json\n{\n  \"scripts\": {\n    \"postinstall\": \"npm install --save hexo-inject\"\n  }\n}\n```\n\n### 2. Register to `inject_ready` filter\n\nhexo-inject will execute `inject_ready` filter to pool all installed plugins for injection configuration once hexo's `after_init` is fired.\n\nIn your plugin:\n\n```js\nhexo.extend.filter.register('inject_ready', (inject) => {\n  // Configure injections here\n  // Inject raw html at head_begin\n  inject.raw('head_begin', 'injected content')\n  // Or short hand\n  inject.headBegin.raw('injected content')\n})\n```\n\n### 3. Simple injection helpers\n\nhexo-inject provides a few helpers for simple HTML content injection:\n\n* `tag (injectionPoint, name, attrs, content, endTag, opts)`\n* `script (injectionPoint, attrs, content, opts)`\n* `style (injectionPoint, attrs, content, opts)`\n* `link (injectionPoint, attrs, opts)`\n\nExamples:\n```js\ninject.link('head_begin', { href: '/foo/bar.css', rel: 'stylesheet' })\ninject.headBegin.script({}, 'var foo = 1;', { shouldInject: (src) => determinedBy(src) })\n```\n\nNotes:\n* `injectionPoint` is omitted if the helper is called from short-hand form (e.g `inject.headBegin`)\n* All values in `attrs` and `content` can be a `string`, a `Promise` that returns a `string`, or a `function` that returns a `string` or a `Promise`\n* `opts.shouldInject` can be a `boolean` value or a `function` that takes current page's HTML source and returns a `boolean` value. If `shouldInject` returns `false`, the content will not be injected to that page.\n\n### 4. Inject files\n\nhexo-inject also provides `require (injectionPoint, module, opts)` helper for file injection.\n\nThe workflow is:\n* File path is specified by `module` and is resolved relative to the callsite script's folder\n* Once resolved, the file will be renderer by hexo's renderer (determined by file's extension). The extension will be changed to output format's. (i.e. `.swig` -> `.html`)\n* The rendered content will be processed by loader (again, determined by file's extension) and the result will be injected\n* If `opts.inline == false`, hexo-inject will serve the file and reference it accordingly (i.e. via `<script src=\"/path/to/served.js\"></script>`). Otherwise the content will be injected directly.\n\nValid `opts` fileds are:\n* `inline` - a boolean value\n* `src` - custom path for serving the file. Default to `/injected/${module.fileName}${module.ext}`\n* `data` - passed to renderer\n* `shouldInject`\n\n#### Custom loader\n\nhexo-inject provides loader for `.js` and `.css` by default. If you need to handle other formats, you should implement your own loader:\n\n```js\ninject.loader.register('.foo', (content, opts) => {\n  return opts.inline\n    ? `<Foo src=${opts.src}></Foo>`\n    : `<Foo>${content}</Foo>`\n})\n```\n\nNote that you might need to handle `opts.inline` accordingly and know that `content` will be an empty string if `inline == false`.\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/akfish/hexo-inject.git"
  },
  "scripts": {
    "prepublish": "gulp clean && gulp es6",
    "test": "gulp test"
  },
  "version": "1.0.0"
}
